// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// Hilmm_multithreads
void Hilmm_multithreads(arma::mat y, arma::mat b0, SEXP bedfile_in, SEXP outfile_in, int thread, int nmar, int threadnumb);
RcppExport SEXP _HiLMM_Hilmm_multithreads(SEXP ySEXP, SEXP b0SEXP, SEXP bedfile_inSEXP, SEXP outfile_inSEXP, SEXP threadSEXP, SEXP nmarSEXP, SEXP threadnumbSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< SEXP >::type bedfile_in(bedfile_inSEXP);
    Rcpp::traits::input_parameter< SEXP >::type outfile_in(outfile_inSEXP);
    Rcpp::traits::input_parameter< int >::type thread(threadSEXP);
    Rcpp::traits::input_parameter< int >::type nmar(nmarSEXP);
    Rcpp::traits::input_parameter< int >::type threadnumb(threadnumbSEXP);
    Hilmm_multithreads(y, b0, bedfile_in, outfile_in, thread, nmar, threadnumb);
    return R_NilValue;
END_RCPP
}
// gblup_ebv
Eigen::VectorXf gblup_ebv(Eigen::VectorXf y, const float h2);
RcppExport SEXP _HiLMM_gblup_ebv(SEXP ySEXP, SEXP h2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXf >::type y(ySEXP);
    Rcpp::traits::input_parameter< const float >::type h2(h2SEXP);
    rcpp_result_gen = Rcpp::wrap(gblup_ebv(y, h2));
    return rcpp_result_gen;
END_RCPP
}
// Loglike
float Loglike(Eigen::VectorXf sg, Eigen::VectorXf ynew, Eigen::VectorXf gnew, float h2);
RcppExport SEXP _HiLMM_Loglike(SEXP sgSEXP, SEXP ynewSEXP, SEXP gnewSEXP, SEXP h2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXf >::type sg(sgSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXf >::type ynew(ynewSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXf >::type gnew(gnewSEXP);
    Rcpp::traits::input_parameter< float >::type h2(h2SEXP);
    rcpp_result_gen = Rcpp::wrap(Loglike(sg, ynew, gnew, h2));
    return rcpp_result_gen;
END_RCPP
}
// tugxy
Rcpp::List tugxy(Eigen::VectorXf y, Eigen::VectorXf tugx);
RcppExport SEXP _HiLMM_tugxy(SEXP ySEXP, SEXP tugxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXf >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXf >::type tugx(tugxSEXP);
    rcpp_result_gen = Rcpp::wrap(tugxy(y, tugx));
    return rcpp_result_gen;
END_RCPP
}
// tugxy2
Rcpp::List tugxy2(Eigen::VectorXf y);
RcppExport SEXP _HiLMM_tugxy2(SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXf >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(tugxy2(y));
    return rcpp_result_gen;
END_RCPP
}
// Cposi_Choice
arma::mat Cposi_Choice(arma::mat b, float ws);
RcppExport SEXP _HiLMM_Cposi_Choice(SEXP bSEXP, SEXP wsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type b(bSEXP);
    Rcpp::traits::input_parameter< float >::type ws(wsSEXP);
    rcpp_result_gen = Rcpp::wrap(Cposi_Choice(b, ws));
    return rcpp_result_gen;
END_RCPP
}
// fast_jiont
Rcpp::List fast_jiont(arma::mat y, arma::mat b0, arma::mat position, float thrd, SEXP bedfile_in);
RcppExport SEXP _HiLMM_fast_jiont(SEXP ySEXP, SEXP b0SEXP, SEXP positionSEXP, SEXP thrdSEXP, SEXP bedfile_inSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type position(positionSEXP);
    Rcpp::traits::input_parameter< float >::type thrd(thrdSEXP);
    Rcpp::traits::input_parameter< SEXP >::type bedfile_in(bedfile_inSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_jiont(y, b0, position, thrd, bedfile_in));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_HiLMM_Hilmm_multithreads", (DL_FUNC) &_HiLMM_Hilmm_multithreads, 7},
    {"_HiLMM_gblup_ebv", (DL_FUNC) &_HiLMM_gblup_ebv, 2},
    {"_HiLMM_Loglike", (DL_FUNC) &_HiLMM_Loglike, 4},
    {"_HiLMM_tugxy", (DL_FUNC) &_HiLMM_tugxy, 2},
    {"_HiLMM_tugxy2", (DL_FUNC) &_HiLMM_tugxy2, 1},
    {"_HiLMM_Cposi_Choice", (DL_FUNC) &_HiLMM_Cposi_Choice, 2},
    {"_HiLMM_fast_jiont", (DL_FUNC) &_HiLMM_fast_jiont, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_HiLMM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
